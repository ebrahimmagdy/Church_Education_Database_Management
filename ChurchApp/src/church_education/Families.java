/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package church_education;

import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import com.placeholder.PlaceHolder;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.sql.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ebrahim
 */
public class Families extends javax.swing.JPanel {

    /**
     * Creates new form served
     */
    LogIn login = new LogIn();
    Connection con = login.con;
    Persons person = new Persons(con);
    Statement st = null;
    PreparedStatement pst = null;
    ResultSet rs, temprs, persons, Serveds, names;
    ResultSet streetsResult;
    ResultSet fathersResult;
    ResultSet servantsResult;
    
    private PlaceHolder holder;
        
    private String family = "";
    private String list = "";
    private String servant = "";
    private String served = "";
    private int models = 0;
    private int maxModels = 0;
    private Date date1;
    private Date date2;
    private ArrayList<String> streetsnames = new ArrayList<>();
    private ArrayList<String> areasnames = new ArrayList<>();
    private ArrayList<String> servantsnames = new ArrayList<>();
    private ArrayList<String> fathers = new ArrayList<>();
    private ArrayList<String> families = new ArrayList<>();
    private ArrayList<String> assistance = new ArrayList<>();
    private ArrayList<String> educations = new ArrayList<>();
    private AutoComplete2 ac = new AutoComplete2();
    private CardLayout cardLayout = new CardLayout();
    
    Models model[] = new Models[100000];

    Object[] raw;
    
    
    public Families() {
        initComponents();
        init();
    }
    
    public void holders(){
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Family = new javax.swing.JComboBox<>();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Date1 = new com.toedter.calendar.JDateChooser();
        Date2 = new com.toedter.calendar.JDateChooser();
        jButton8 = new javax.swing.JButton();
        Desk = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ServedTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        ServantTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        display = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 240));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+4));
        jLabel1.setText("اختار الاسرة");

        Family.setFont(Family.getFont().deriveFont(Family.getFont().getStyle() | java.awt.Font.BOLD, Family.getFont().getSize()+4));
        Family.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FamilyMousePressed(evt);
            }
        });

        jButton6.setFont(jButton6.getFont().deriveFont(jButton6.getFont().getStyle() | java.awt.Font.BOLD, jButton6.getFont().getSize()+4));
        jButton6.setText("نسب المخدومين");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(jButton7.getFont().deriveFont(jButton7.getFont().getStyle() | java.awt.Font.BOLD, jButton7.getFont().getSize()+4));
        jButton7.setText("نسب الخدام");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() | java.awt.Font.BOLD, jLabel2.getFont().getSize()+4));
        jLabel2.setText("الفترة");

        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getSize()+4f));
        jLabel3.setText("من");

        jLabel4.setFont(jLabel4.getFont().deriveFont(jLabel4.getFont().getSize()+4f));
        jLabel4.setText("الى");

        jButton8.setFont(jButton8.getFont().deriveFont(jButton8.getFont().getStyle() | java.awt.Font.BOLD, jButton8.getFont().getSize()+4));
        jButton8.setText("حضور الخدام");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(130, 130, 130))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(Date2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(244, 244, 244)
                        .addComponent(jLabel1)
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(Date1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(107, 107, 107)
                        .addComponent(Family, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(117, 117, 117))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Date2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Date1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Family, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1050, 140));

        Desk.setBackground(new java.awt.Color(255, 255, 255));
        Desk.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        ServedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "الاسم", "نسبة الحضور", "معدل حضور القداس", "معدل الافتقاد", "النسبة %"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ServedTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(ServedTable);
        if (ServedTable.getColumnModel().getColumnCount() > 0) {
            ServedTable.getColumnModel().getColumn(0).setResizable(false);
            ServedTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            ServedTable.getColumnModel().getColumn(1).setResizable(false);
            ServedTable.getColumnModel().getColumn(2).setResizable(false);
            ServedTable.getColumnModel().getColumn(3).setResizable(false);
            ServedTable.getColumnModel().getColumn(4).setResizable(false);
            ServedTable.getColumnModel().getColumn(5).setResizable(false);
        }

        ServantTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "الاسم", "معدل حضور الخدمة ", "معدل حضور اجتماع الاسرة ", "معدل حضور القداس", "معدل التحضير", "معدل الافتقاد", "النسبة %"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ServantTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(ServantTable);
        if (ServantTable.getColumnModel().getColumnCount() > 0) {
            ServantTable.getColumnModel().getColumn(0).setResizable(false);
            ServantTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            ServantTable.getColumnModel().getColumn(1).setResizable(false);
            ServantTable.getColumnModel().getColumn(2).setResizable(false);
            ServantTable.getColumnModel().getColumn(3).setResizable(false);
            ServantTable.getColumnModel().getColumn(4).setResizable(false);
            ServantTable.getColumnModel().getColumn(5).setResizable(false);
            ServantTable.getColumnModel().getColumn(6).setResizable(false);
            ServantTable.getColumnModel().getColumn(7).setResizable(false);
        }

        javax.swing.GroupLayout DeskLayout = new javax.swing.GroupLayout(Desk);
        Desk.setLayout(DeskLayout);
        DeskLayout.setHorizontalGroup(
            DeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        DeskLayout.setVerticalGroup(
            DeskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        add(Desk, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 860, 530));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(79, 8, 8), 5, true));

        display.setFont(display.getFont().deriveFont(display.getFont().getSize()+4f));
        display.setText("اسرة جديدة");
        display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayActionPerformed(evt);
            }
        });

        jButton1.setFont(jButton1.getFont().deriveFont(jButton1.getFont().getSize()+4f));
        jButton1.setText("تعديل");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(jButton2.getFont().deriveFont(jButton2.getFont().getSize()+4f));
        jButton2.setText("حذف");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton5.setFont(jButton5.getFont().deriveFont(jButton5.getFont().getSize()+4f));
        jButton5.setText("refresh");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(display, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(display)
                .addGap(65, 65, 65)
                .addComponent(jButton1)
                .addGap(66, 66, 66)
                .addComponent(jButton2)
                .addGap(84, 84, 84)
                .addComponent(jButton5)
                .addContainerGap(153, Short.MAX_VALUE))
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 190, 530));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(Family.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null, "رجاء اختيار اسم الاسرة !", "message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        family = (String) Family.getSelectedItem();
        EditFamily ef = new EditFamily(family);
        ef.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        ef.setVisible(true);
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SFamilyrchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        
    }//GEN-LAST:event_SearchActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int raw = ServedTable.getRowCount();
        for(int i = 0; i < raw; i++){
            if(!(boolean)ServedTable.getValueAt(i, 0))
                continue;
            try {
                String familyn = (String)ServedTable.getValueAt(i, 1), servantn = (String)ServedTable.getValueAt(i, 3), listNamen = (String)ServedTable.getValueAt(i, 2);
                String ln, fn, sern;
                String l, f = null, ser;
                int servantIDn = -1, familyIDn = -1;
                int servantID = -1, familyID = -1;
                if(familyn != null && !familyn.equals("")){
                    pst = (PreparedStatement) con.prepareStatement("select FamilyID from Families where FamilyName = ?");
                    pst.setString(1, familyn);
                    rs = pst.executeQuery();
                    if(rs.next()){
                        familyIDn = rs.getInt("FamilyID");
                        f = " FamilyID = " + familyIDn + " ";
                    }
                }else{
                    f = " FamilyID is null ";
                }
                if(!servantn.isEmpty()){
                    String[] s = servantn.split("\\s+");
                    if(s.length == 4){
                        pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? AND ThirdName = ? AND FourthName = ? LIMIT 1");
                        pst.setString(1, s[0]);
                        pst.setString(2, s[1]);
                        pst.setString(3, s[2]);
                        pst.setString(4, s[3]);
                        rs = pst.executeQuery();
                        if(rs.next())
                        servantIDn = rs.getInt("PersonID");
                    }else if(s.length == 3){
                        pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? AND ThirdName = ? LIMIT 1");
                        pst.setString(1, s[0]);
                        pst.setString(2, s[1]);
                        pst.setString(3, s[2]);
                        rs = pst.executeQuery();
                        if(rs.next())
                        servantIDn = rs.getInt("PersonID");
                    }else if(s.length == 2){
                        pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? LIMIT 1");
                        pst.setString(1, s[0]);
                        pst.setString(2, s[1]);
                        rs = pst.executeQuery();
                        if(rs.next())
                        servantIDn = rs.getInt("PersonID");
                    }
                    ser = " ServantID = " + servantIDn + " ";
                }else{
                    ser = " servantID is null ";
                }
                if(listNamen.isEmpty()){
                    l = " ListName is null ";
                }else{
                    l = " listName = " + "\"" + listNamen + "\" ";
                }
                String q = "select ServedID from Lists where " + l + " and " + ser + " and " + f;
                pst = (PreparedStatement) con.prepareStatement(q);
                rs = pst.executeQuery();
                if(rs.next()){
                    JOptionPane.showMessageDialog(this, "لا يمكنك حذف القائمة يمكنك فقط حذف القوائم الفارغة !", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                q = "delete from Lists where " + l + " and " + ser + " and " + f;
                pst = (PreparedStatement) con.prepareStatement(q);
                System.out.println("1" + pst.asSql());
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Done !", "", JOptionPane.INFORMATION_MESSAGE);
            }catch(SQLException e){
                
            }
            init();
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayActionPerformed
        // TODO add your handling code here:
        NewFamily nf = new NewFamily();
        nf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        nf.setVisible(true);
    }//GEN-LAST:event_displayActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        init();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if(Family.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null, "رجاء اختيار اسم الاسرة!", "message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(Date1.getDate() == null){
            JOptionPane.showMessageDialog(null, "رجاء ادخال تاريخ بداية الفترة !", "message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(Date2.getDate() == null){
            JOptionPane.showMessageDialog(null, "رجاء ادخال تاريخ نهاية الفترة !", "message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        cardLayout.show(Desk, "served");
        family = (String) Family.getSelectedItem();
        date1 = new Date(Date1.getDate().getTime());
        date2 = new Date(Date2.getDate().getTime());
        double attendance = 0, liturgy = 0, visit = 0, duration = 0, percent = 0;
        duration = date2.getTime() - date1.getTime();
        System.out.println(duration);
        duration /= 1000;
        System.out.println(duration);
        duration /= (60 * 60);
        System.out.println(duration);
        duration = Math.ceil(duration / 24);
        System.out.println(duration);
        DefaultTableModel model = (DefaultTableModel) ServedTable.getModel();
        model.getDataVector().removeAllElements();
        try {
            pst = (PreparedStatement) con.prepareStatement("select  d.PersonID" +
                    " from Distribution d inner join Families f on d.FamilyID = f.FamilyID " +
                    "where f.FamilyName = ? and d.Role = ?");
            pst.setString(1, family);
            pst.setString(2, "Student");
            temprs = pst.executeQuery();
            while(temprs.next()){
                attendance = liturgy = visit = percent = 0;
                pst = (PreparedStatement) con.prepareStatement("select * from ServedReview where ServedID = ? and Date >= ? and Date <= ?");
                pst.setInt(1, temprs.getInt("PersonID"));
                pst.setDate(2, date1);
                pst.setDate(3, date2);
                rs = pst.executeQuery();
                pst = (PreparedStatement) con.prepareStatement("select * from Persons where PersonID = ?");
                pst.setInt(1, temprs.getInt("PersonID"));
                names = pst.executeQuery();
                Object[] raw = new Object[6];
                raw[0] = temprs.getInt("PersonID");
                System.out.println(raw[0]);
                if(names.next()){
                    raw[1] = names.getString("FirstName") + " " + names.getString("SecondName") + " " + names.getString("ThirdName") + " " + names.getString("FourthName");
                    System.out.println(raw[1]);
                }
                while(rs.next()){
                    attendance += (rs.getBoolean("Attendance"))? 1 : 0;
                    liturgy += (rs.getBoolean("Liturgy"))? 1 : 0;
                    visit += (rs.getBoolean("Visit"))? 1 : 0;
                }
                System.out.println(attendance);
                raw[2] = attendance * 30.0 / duration;
                attendance /= duration;
                System.out.println(raw[2]);
                System.out.println(liturgy);
                raw[3] = liturgy * 30.0 / duration;
                liturgy /= duration;
                System.out.println(raw[3]);
                System.out.println(visit);
                raw[4] = visit * 30.0 / duration;
                visit /= duration;
                System.out.println(raw[4]);
                percent = ((attendance * 7) + liturgy * 28 + visit * 30) * 100 / 3;
                raw[5] = percent; 
                System.out.println(raw[5]);
                model.addRow(raw);
            }
            ServedTable.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(Families.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        if(Family.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null, "رجاء اختيار اسم الاسرة!", "message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(Date1.getDate() == null){
            JOptionPane.showMessageDialog(null, "رجاء ادخال تاريخ بداية الفترة !", "message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(Date2.getDate() == null){
            JOptionPane.showMessageDialog(null, "رجاء ادخال تاريخ نهاية الفترة !", "message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        cardLayout.show(Desk, "servant");
        family = (String) Family.getSelectedItem();
        date1 = new Date(Date1.getDate().getTime());
        date2 = new Date(Date2.getDate().getTime());
        double attendance = 0, familyAttendance = 0, liturgy = 0, preparation = 0, visit = 0, duration = 0, percent = 0, sons = 0;
        duration = date2.getTime() - date1.getTime();
        duration /= 1000;
        duration /= (60 * 60);
        duration = Math.ceil(duration / 24);
        DefaultTableModel model = (DefaultTableModel) ServantTable.getModel();
        model.getDataVector().removeAllElements();
        try {
            pst = (PreparedStatement) con.prepareStatement("select  d.PersonID" +
                    " from Distribution d inner join Families f on d.FamilyID = f.FamilyID " +
                    "where f.FamilyName = ? and d.Role = ?");
            pst.setString(1, family);
            pst.setString(2, "Servant");
            temprs = pst.executeQuery();
            while(temprs.next()){
                attendance = familyAttendance = liturgy = preparation = visit = sons = 0;
                
                pst = (PreparedStatement) con.prepareStatement("select * from Lists l " + 
                        " inner join Families f on f.FamilyID = l.FamilyID " + 
                        " where l.ServantID = ? and f.FamilyName = ?");
                pst.setInt(1, temprs.getInt("PersonID"));
                pst.setString(2, family);
                names = pst.executeQuery();
                while(names.next()){
                    sons++;
                }
                if(sons == 0){
                    sons = 1;
                }
                
                pst = (PreparedStatement) con.prepareStatement("select * from ServantReview where ServantID = ? and Date >= ? and Date <= ?");
                pst.setInt(1, temprs.getInt("PersonID"));
                pst.setDate(2, date1);
                pst.setDate(3, date2);
                rs = pst.executeQuery();
                pst = (PreparedStatement) con.prepareStatement("select * from Persons where PersonID = ?");
                pst.setInt(1, temprs.getInt("PersonID"));
                names = pst.executeQuery();
                
                Object[] raw = new Object[8];
                raw[0] = temprs.getInt("PersonID");
                
                if(names.next()){
                    raw[1] = names.getString("FirstName") + " " + names.getString("SecondName") + " " + names.getString("ThirdName") + " " + names.getString("FourthName");
                }
                
                while(rs.next()){
                    attendance += (rs.getBoolean("Attendance"))? 1 : 0;
                    familyAttendance += (rs.getBoolean("FamilyAttendance"))? 1 : 0;
                    liturgy += (rs.getBoolean("Liturgy"))? 1 : 0;
                    preparation += (rs.getBoolean("Preparation"))? 1 : 0;
                    visit += rs.getInt("Visit");
                }
                
                raw[2] = attendance * 30.0 / duration;
                attendance /= duration;
                raw[3] = familyAttendance * 30.0 / duration;
                familyAttendance /= duration;
                raw[4] = liturgy * 30.0 / duration;
                liturgy /= duration;
                raw[5] = preparation * 30.0 / duration;
                preparation /= duration;
                raw[6] = visit * 30.0 / duration;
                visit /= duration;
                percent = (attendance * 7.0 + familyAttendance * 7.0 + preparation * 7.0 + liturgy * 28.0 + visit * 30.0 / sons) * 100.0 / 5.0;
                raw[7] = percent; 
                model.addRow(raw);
            }
            ServantTable.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(Families.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void FamilyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FamilyMousePressed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            families = person.getFamilies();
            person.fillComboBox(Family, families);
        } catch (SQLException ex) {
            Logger.getLogger(NewServedF.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_FamilyMousePressed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        family = (String) Family.getSelectedItem();
        if(family == null){
            JOptionPane.showMessageDialog(null, "اختار الاسرة !", "message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ServantReview sr = new ServantReview(family);
        sr.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        sr.setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser Date1;
    private com.toedter.calendar.JDateChooser Date2;
    private javax.swing.JPanel Desk;
    private javax.swing.JComboBox<String> Family;
    private javax.swing.JTable ServantTable;
    private javax.swing.JTable ServedTable;
    private javax.swing.JButton display;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    private void init() {
        //initComponents();
//        jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);
//        for(int i = 0; i < 4; i++){
//            jTable1.getColumnModel().getColumn(i).setPreferredWidth(250);
//        }
        
        Desk.setLayout(cardLayout);
        Desk.add(jScrollPane2, "served");
        Desk.add(jScrollPane3, "servant");
        ServedTable.setAutoResizeMode(ServedTable.AUTO_RESIZE_OFF);
        for(int i = 0; i < ServedTable.getColumnCount(); i++){
            ServedTable.getColumnModel().getColumn(i).setPreferredWidth(150);
        }
        ServantTable.setAutoResizeMode(ServantTable.AUTO_RESIZE_OFF);
        for(int i = 0; i < ServantTable.getColumnCount(); i++){
            ServantTable.getColumnModel().getColumn(i).setPreferredWidth(150);
        }
    }

}
