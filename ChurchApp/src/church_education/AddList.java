/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package church_education;

import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author Ebrahim
 */
public class AddList extends javax.swing.JFrame {

    /**
     * Creates new form AddList
     */
    private ArrayList families = new ArrayList();
    private ArrayList servantsnames = new ArrayList();
    private AutoComplete2 ac = new AutoComplete2();
    LogIn login = new LogIn();
    Connection con = login.con;
    Persons person = new Persons(con);
    Statement st = null;
    PreparedStatement pst = null;
    ResultSet rs, temprs;
    
    private JTable table;
    private int r;
    private ArrayList pID = new ArrayList();
    private String family = "";
    private int servantID;
    private String listName = "";
    private String servant = "";
    private String served = "";
    private boolean exist = false;
    
    public AddList(ArrayList pid) {
        try {
            initComponents();
            buttonGroup1.add(jRadioButton1);
            buttonGroup1.add(jRadioButton2);
            this.pID = pid;
            person.getFamilies();
            person.fillComboBox(Family, families);
            fill();
        } catch (SQLException ex) {
            Logger.getLogger(AddList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fill(){
        ListName.setText("");
        jTextArea1.append("الاسماء \n\n");
        String q = "";
        for(int i = 0; i < pID.size(); i++){
            try {
                q = "select s.FirstName as n1, s.SecondName as n2, s.ThirdName as n3, f.FamilyName " + 
                        "from Persons p left join Persons s on p.ServantID = s.ServantID " +
                        "left join Families f on f.FamilyID = p.FamilyID " + 
                        "where p.PersonID = ?";
                pst = (PreparedStatement) con.prepareStatement(q);
                pst.setInt(1, (int)pID.get(i));
                rs = pst.executeQuery();
                Family.setSelectedItem(rs.getString("FamilyName"));
                Servant.setText(rs.getString("n1") + " " + rs.getString("n2") + " " + rs.getString("n3"));
                if(!Family.getSelectedItem().equals(null) && !Servant.getText().isEmpty())
                    break;
            } catch (SQLException ex) {
                Logger.getLogger(AddList.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       
       String row = "";
       
        for(int i = 0; i < pID.size(); i++){
            try {
                q = "select * from Persons where PersonID = ?";
                pst = (PreparedStatement) con.prepareStatement(q);
                pst.setInt(1, (int)pID.get(i));
                rs = pst.executeQuery();
                while(rs.next()){
                    row = pID.get(i).toString() + "          " + rs.getString("FirstName") + " " +
                    rs.getString("SecondName") + " " + rs.getString("ThirdName") + " " + rs.getString("FourthName") +"\n";
                    jTextArea1.append(row);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddList.class.getName()).log(Level.SEVERE, null, ex);
            }
           
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        ListName = new javax.swing.JTextField();
        Servant = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        Family = new javax.swing.JComboBox<>();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel11.setText("اسم القائمة");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 130, -1, -1));

        jLabel12.setText("الاسرة");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 80, -1, -1));

        jLabel13.setText("اسم الخادم");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, -1, -1));

        ListName.setFont(ListName.getFont().deriveFont(ListName.getFont().getSize()+2f));
        jPanel1.add(ListName, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, 159, -1));

        Servant.setFont(Servant.getFont().deriveFont(Servant.getFont().getSize()+2f));
        Servant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ServantMousePressed(evt);
            }
        });
        jPanel1.add(Servant, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 159, -1));

        jButton1.setFont(jButton1.getFont().deriveFont(jButton1.getFont().getStyle() | java.awt.Font.BOLD, jButton1.getFont().getSize()+3));
        jButton1.setText("حفظ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 450, 120, -1));

        Family.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FamilyMousePressed(evt);
            }
        });
        Family.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FamilyActionPerformed(evt);
            }
        });
        jPanel1.add(Family, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 160, -1));

        jRadioButton1.setFont(jRadioButton1.getFont().deriveFont(jRadioButton1.getFont().getStyle() | java.awt.Font.BOLD));
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("عمل قائمة جديدة");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, -1, -1));

        jRadioButton2.setFont(jRadioButton2.getFont().deriveFont(jRadioButton2.getFont().getStyle() | java.awt.Font.BOLD));
        jRadioButton2.setText("اضافة الاسماء الى قائمة موجودة");
        jPanel1.add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, -1, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 590, 260));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 664, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ServantMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ServantMousePressed
        try {
            // TODO add your handling code here:
            servantsnames = person.getServantsNames();
            ac.autoComplete(Servant, servantsnames);
        } catch (SQLException ex) {
            Logger.getLogger(AddList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ServantMousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            family = listName = servant = "";
            int familyID = -1, servantID = -1;
            family = (String) Family.getSelectedItem();
            listName = ListName.getText();
            servant = Servant.getText();
            if(listName == null || listName.equals("")){
                JOptionPane.showMessageDialog(null, "رجاء ادخال اسم القائمة!", "Alert", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(family != null && !family.equals("")){
                pst = (PreparedStatement) con.prepareStatement("select FamilyID from Families where FamilyName = ?");
                pst.setString(1, family);
                rs = pst.executeQuery();
                if(rs.next()){
                    familyID = rs.getInt("FamilyID");
                }else{
                    JOptionPane.showMessageDialog(null,  "عفوا لاتوجد اسرة بهذا الاسم !", "Alert", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            if(!servant.equals("")){
                String[] s = servant.split("\\s+");
                if(s.length == 4){
                    pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? AND ThirdName = ? AND FourthName = ? LIMIT 1");
                    pst.setString(1, s[0]);
                    pst.setString(2, s[1]);
                    pst.setString(3, s[2]);
                    pst.setString(4, s[3]);
                    rs = pst.executeQuery();
                    if(rs.next())
                    servantID = rs.getInt("PersonID");
                }else if(s.length == 3){
                    pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? AND ThirdName = ? LIMIT 1");
                    pst.setString(1, s[0]);
                    pst.setString(2, s[1]);
                    pst.setString(3, s[2]);
                    rs = pst.executeQuery();
                    if(rs.next())
                    servantID = rs.getInt("PersonID");
                }else if(s.length == 2){
                    pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? LIMIT 1");
                    pst.setString(1, s[0]);
                    pst.setString(2, s[1]);
                    rs = pst.executeQuery();
                    if(rs.next())
                    servantID = rs.getInt("PersonID");
                }else{
                    servantID = -1;
                    JOptionPane.showMessageDialog(null, "رجاء اختيار اسم الخادم من الاختيارات!", "Alert", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            if(jRadioButton1.isSelected()){
                if(servantID != -1 && familyID != -1){
                    pst = (PreparedStatement) con.prepareStatement("select * from Lists where ServantID = ? and ListName = ? and FamilyID = ?");
                    pst.setInt(1, servantID);
                    pst.setString(2, listName);
                    pst.setInt(3, familyID);
                    rs = pst.executeQuery();
                    if(rs.next()){
                        JOptionPane.showMessageDialog(null, "هذة الاسرة بها قائمة بنفس الاسم لنفس الخادم رجاء تغير اسم القائمة!", "Alert", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }else if(familyID != -1){
                    pst = (PreparedStatement) con.prepareStatement("select * from Lists where ListName = ? and FamilyID = ? and (ServantID is null)");
                    pst.setString(1, listName);
                    pst.setInt(2, familyID);
                    rs = pst.executeQuery();
                    if(rs.next()){
                        JOptionPane.showMessageDialog(null, "هذة القائمة موجودة بالفعل !", "Alert", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }else if(servantID != -1){
                    pst = (PreparedStatement) con.prepareStatement("select * from Lists where ServantID = ? and ListName = ? and (FamilyID is null)");
                    pst.setInt(1, servantID);
                    pst.setString(2, listName);
                    rs = pst.executeQuery();
                    if(rs.next()){
                        JOptionPane.showMessageDialog(null, "هذة القائمة موجودة بالفعل !", "Alert", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }else{
                    pst = (PreparedStatement) con.prepareStatement("select * from Lists where ListName = ? and (ServantID is null) and (FamilyID is null)");
                    pst.setString(1, listName);
                    rs = pst.executeQuery();
                    if(rs.next()){
                        JOptionPane.showMessageDialog(null, " هذة القائمة موجودة بالفعل !", "Alert", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }else{
                if(servantID != -1 && familyID != -1){
                    pst = (PreparedStatement) con.prepareStatement("select * from Lists where ServantID = ? and ListName = ? and FamilyID = ?");
                    pst.setInt(1, servantID);
                    pst.setString(2, listName);
                    pst.setInt(3, familyID);
                    rs = pst.executeQuery();
                    if(!rs.next()){
                        JOptionPane.showMessageDialog(null, "لا يوجد قائمة بهذه البيانات!", "Alert", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }else if(familyID != -1){
                    pst = (PreparedStatement) con.prepareStatement("select * from Lists where ListName = ? and FamilyID = ? and (ServantID is null)");
                    pst.setString(1, listName);
                    pst.setInt(2, familyID);
                    rs = pst.executeQuery();
                    if(!rs.next()){
                        JOptionPane.showMessageDialog(null, "لا يوجد قائمة بهذه البيانات!", "Alert", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }else if(servantID != -1){
                    pst = (PreparedStatement) con.prepareStatement("select * from Lists where ServantID = ? and ListName = ? and (FamilyID is null)");
                    pst.setInt(1, servantID);
                    pst.setString(2, listName);
                    rs = pst.executeQuery();
                    if(!rs.next()){
                        JOptionPane.showMessageDialog(null, "لا يوجد قائمة بهذه البيانات!", "Alert", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }else{
                    pst = (PreparedStatement) con.prepareStatement("select * from Lists where ListName = ? and (ServantID is null) and (FamilyID is null)");
                    pst.setString(1, listName);
                    rs = pst.executeQuery();
                    if(!rs.next()){
                        JOptionPane.showMessageDialog(null, "لا يوجد قائمة بهذه البيانات!", "Alert", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
            System.out.println(r);
            for(int i = 0; i < pID.size(); i++){
                if(servantID != -1 && familyID != -1){
                    pst = (PreparedStatement) con.prepareStatement("insert into Lists(ServantID, ServedID, ListName, FamilyID) values(?, ?, ?, ?)");
                    pst.setInt(1, servantID);
                    pst.setInt(2, (int)pID.get(i));
                    pst.setString(3, listName);
                    pst.setInt(4, familyID);
                    pst.executeUpdate();
                }else if(familyID != -1){
                    pst = (PreparedStatement) con.prepareStatement("insert into Lists(ServedID, ListName, FamilyID) values(?, ?, ?)");
                    pst.setInt(1, (int)pID.get(i));
                    pst.setString(2, listName);
                    pst.setInt(3, familyID);
                    pst.executeUpdate();
                }else if(servantID != -1){
                    pst = (PreparedStatement) con.prepareStatement("insert into Lists(ServantID, ServedID, ListName) values(?, ?, ?)");
                    pst.setInt(1, servantID);
                    pst.setInt(2, (int)pID.get(i));
                    pst.setString(3, listName);
                    pst.executeUpdate();
                }else{
                    pst = (PreparedStatement) con.prepareStatement("insert into Lists(ServedID, ListName) values(?, ?)");
                    pst.setInt(1, (int)pID.get(i));
                    pst.setString(2, listName);
                    pst.executeUpdate();
                }
                if(jRadioButton1.isSelected() && familyID != -1){
                    person.addDistribution(family, (int)pID.get(i), 1);
                }
            }
            Family.setSelectedIndex(0);
            Servant.setText("");
            ListName.setText("");
            jRadioButton1.setSelected(true);
            jTextArea1.setText("");
        }catch(SQLException ex){
            Logger.getLogger(AddList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void FamilyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FamilyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FamilyActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void FamilyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FamilyMousePressed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            families = person.getFamilies();
            person.fillComboBox(Family, families);
        } catch (SQLException ex) {
            Logger.getLogger(NewServantF.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_FamilyMousePressed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Family;
    private javax.swing.JTextField ListName;
    private javax.swing.JTextField Servant;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
