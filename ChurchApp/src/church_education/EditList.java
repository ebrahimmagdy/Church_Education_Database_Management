/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package church_education;

import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Ebrahim
 */
public class EditList extends javax.swing.JFrame {

    /**
     * Creates new form EditFathern
     */
    LogIn login = new LogIn();
    Connection con = login.con;
    Persons person = new Persons(con);
    Statement st = null;
    PreparedStatement pst = null;
    ResultSet rs, temprs;
    
    private JTable table;
    private int r;
    
    private String check = "";
    private String listName = "";
    private String servant = "";
    private String family = "";
    
    private int fID;
    private String street1 = "";
    private String street2 = "";
    
    private ArrayList<String> streetsnames = new ArrayList<>();
    private ArrayList<String> areasnames = new ArrayList<>();
    private ArrayList<String> servantsnames = new ArrayList<>();
    private ArrayList<String> fathers = new ArrayList<>();
    private ArrayList<String> families = new ArrayList<>();
    private ArrayList<String> assistance = new ArrayList<>();
    private ArrayList<String> educations = new ArrayList<>();
    private AutoComplete2 ac = new AutoComplete2();
    
    public EditList(String family, String servant, String listName) {
        initComponents();
        this.family = family;
        this.servant = servant;
        this.listName = listName;
        fill();
        
    }

    private void fill(){
        ListName.setText(listName);
        Servant.setText(servant);
        Families.setSelectedItem(family);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        ListName = new javax.swing.JTextField();
        Servant = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        Families = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        jLabel19.setFont(jLabel19.getFont().deriveFont(jLabel19.getFont().getSize()+4f));
        jLabel19.setText("اسم القائمة");

        ListName.setFont(ListName.getFont().deriveFont(ListName.getFont().getSize()+4f));
        ListName.setToolTipText("");
        ListName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ListNameMouseEntered(evt);
            }
        });

        Servant.setFont(Servant.getFont().deriveFont(Servant.getFont().getSize()+4f));
        Servant.setToolTipText("");
        Servant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ServantMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ServantMouseEntered(evt);
            }
        });
        Servant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ServantKeyPressed(evt);
            }
        });

        jLabel21.setFont(jLabel21.getFont().deriveFont(jLabel21.getFont().getSize()+4f));
        jLabel21.setText("الخادم");

        jButton1.setFont(jButton1.getFont().deriveFont(jButton1.getFont().getStyle() | java.awt.Font.BOLD, jButton1.getFont().getSize()+3));
        jButton1.setText("حفظ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel22.setFont(jLabel22.getFont().deriveFont(jLabel22.getFont().getSize()+4f));
        jLabel22.setText("الاسرة");

        Families.setFont(Families.getFont().deriveFont(Families.getFont().getSize()+4f));
        Families.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FamiliesMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(ListName, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel19))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Servant)
                                .addComponent(Families, 0, 203, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ListName)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(Servant, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Families, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jButton1)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ListNameMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListNameMouseEntered
       
    }//GEN-LAST:event_ListNameMouseEntered

    private void ServantMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ServantMouseEntered
        // TODO add your handling code here:

    }//GEN-LAST:event_ServantMouseEntered

    private void ServantKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ServantKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_ServantKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String familyn = (String)Families.getSelectedItem(), servantn = Servant.getText(), listNamen = ListName.getText();
            String ln, fn, sern;
            String l, f, ser;
            int servantIDn = -1, familyIDn = -1;
            int servantID = -1, familyID = -1;
            if(familyn != null && !familyn.equals("")){
                pst = (PreparedStatement) con.prepareStatement("select FamilyID from Families where FamilyName = ?");
                pst.setString(1, familyn);
                rs = pst.executeQuery();
                if(rs.next()){
                    familyIDn = rs.getInt("FamilyID");
                    f = " FamilyID = " + familyIDn + " ";
                }else{
                    JOptionPane.showMessageDialog(null,  "عفوا لاتوجد اسرة بهذا الاسم !", "Alert", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }else{
                f = " FamilyID is null ";
            }
            if(!servantn.isEmpty()){
                String[] s = servantn.split("\\s+");
                if(s.length == 4){
                    pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? AND ThirdName = ? AND FourthName = ? LIMIT 1");
                    pst.setString(1, s[0]);
                    pst.setString(2, s[1]);
                    pst.setString(3, s[2]);
                    pst.setString(4, s[3]);
                    rs = pst.executeQuery();
                    if(rs.next())
                    servantIDn = rs.getInt("PersonID");
                }else if(s.length == 3){
                    pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? AND ThirdName = ? LIMIT 1");
                    pst.setString(1, s[0]);
                    pst.setString(2, s[1]);
                    pst.setString(3, s[2]);
                    rs = pst.executeQuery();
                    if(rs.next())
                    servantIDn = rs.getInt("PersonID");
                }else if(s.length == 2){
                    pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? LIMIT 1");
                    pst.setString(1, s[0]);
                    pst.setString(2, s[1]);
                    rs = pst.executeQuery();
                    if(rs.next())
                    servantIDn = rs.getInt("PersonID");
                }else{
                    servantIDn = -1;
                    JOptionPane.showMessageDialog(null, "رجاء اختيار اسم الخادم من الاختيارات!", "Alert", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                ser = " ServantID = " + servantIDn + " ";
            }else{
                ser = " servantID is null ";
            }
            if(listNamen.isEmpty()){
                l = " ListName is null ";
            }else{
                l = " listName = " + "\"" + listNamen + "\" ";
            }
            String q = "select * from Lists where " + l + " and " + ser + " and " + f;
            pst = (PreparedStatement) con.prepareStatement(q);
            System.out.println("1" + pst.asSql());
            rs = pst.executeQuery();
            int op = 1;
            if(rs.next()){
                op = JOptionPane.showConfirmDialog(null,  "هذة القائمة موجودة بالفعل هل تريد دمج القائمتين ؟", "Alert", JOptionPane.YES_NO_OPTION);
                if(op == 1){
                    return;
                }
            }
            if(family != null && !family.equals("")){
                pst = (PreparedStatement) con.prepareStatement("select FamilyID from Families where FamilyName = ?");
                pst.setString(1, family);
                rs = pst.executeQuery();
                if(rs.next()){
                    familyID = rs.getInt("FamilyID");
                    f = " FamilyID = " + familyID + " ";
                }else{
                    JOptionPane.showMessageDialog(null,  "عفوا لاتوجد اسرة بهذا الاسم2 !", "Alert", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }else{
                f = " FamilyID is null ";
            }
            if(!servant.isEmpty()){
                String[] s = servant.split("\\s+");
                if(s.length == 4){
                    pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? AND ThirdName = ? AND FourthName = ? LIMIT 1");
                    pst.setString(1, s[0]);
                    pst.setString(2, s[1]);
                    pst.setString(3, s[2]);
                    pst.setString(4, s[3]);
                    rs = pst.executeQuery();
                    if(rs.next())
                    servantID = rs.getInt("PersonID");
                }else if(s.length == 3){
                    pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? AND ThirdName = ? LIMIT 1");
                    pst.setString(1, s[0]);
                    pst.setString(2, s[1]);
                    pst.setString(3, s[2]);
                    rs = pst.executeQuery();
                    if(rs.next())
                    servantID = rs.getInt("PersonID");
                }else if(s.length == 2){
                    pst = (PreparedStatement) con.prepareStatement("SELECT PersonID FROM Persons WHERE FirstName = ? AND SecondName = ? LIMIT 1");
                    pst.setString(1, s[0]);
                    pst.setString(2, s[1]);
                    rs = pst.executeQuery();
                    if(rs.next())
                    servantID = rs.getInt("PersonID");
                }else{
                    servantID = -1;
                    JOptionPane.showMessageDialog(null, "رجاء اختيار اسم الخادم من الاختيارات!", "Alert", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                ser = " ServantID = " + servantID + " ";
            }else{
                ser = " servantID is null ";
            }
            if(listNamen.isEmpty()){
                l = " ListName is null ";
            }else{
                l = " listName = " + "\"" + listName + "\" ";
            }
            q = "update Lists set FamilyID = ?, ServantID = ?, ListName = ? " + 
                    "where " + f + " and " + ser + " and " + l;
            pst = (PreparedStatement) con.prepareStatement(q);
            if(familyIDn != -1)
                pst.setInt(1, familyIDn);
            else
                pst.setString(1, null);
            if(servantIDn != -1)
                pst.setInt(2, servantIDn);
            else
                pst.setString(2, null);
            if(listNamen == null || listNamen.equals("")){
                JOptionPane.showMessageDialog(null, "رجاء ادخال اسم القائمة !", "Alert", JOptionPane.ERROR_MESSAGE);
                return;
            }
            pst.setString(3, listNamen);
            System.out.println("2" + pst.asSql());
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Done!", "Alert", JOptionPane.INFORMATION_MESSAGE);
            ListName.setText("");
            Families.setSelectedItem(null);
            Servant.setText("");
        } catch (SQLException ex) {
            Logger.getLogger(EditList.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "some thing wronge hapen!", "Alert", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ServantMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ServantMouseClicked
        try {
            // TODO add your handling code here:
            servantsnames = person.getServantsNames();
            ac.autoComplete(Servant, servantsnames);
        } catch (SQLException ex) {
            Logger.getLogger(EditList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ServantMouseClicked

    private void FamiliesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FamiliesMouseClicked
        try {
            families = person.getFamilies();
            person.fillComboBox(Families, families);
        } catch (SQLException ex) {
            Logger.getLogger(EditList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_FamiliesMouseClicked

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Families;
    private javax.swing.JTextField ListName;
    private javax.swing.JTextField Servant;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
